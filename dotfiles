#!/bin/sh

# TODO:
#   [ ] usage function

# -- COLORS -------------------------------------------------------------------

    RED='\e[31m'
  GREEN='\e[32m'
 YELLOW='\e[33m'
   BLUE='\e[34m'
MAGENTA='\e[35m'
   CYAN='\e[36m'
 NORMAL='\e[0m'


# -- PATH INITIALIZATION ------------------------------------------------------

user="${USER:-${LOGNAME:-#TODO}}"
home="${HOME:-'~'}"


# -- LOGGING FUNCTIONS --------------------------------------------------------

info      () { echo -en    "${CYAN}[INFO]${NORMAL} " "${@} " ;          }
infoline  () { echo -e     "${CYAN}[INFO]${NORMAL} " "${@} " ;          }
warn      () { echo -e   "${YELLOW}[WARN]${NORMAL} " "${@} " ;          }
fail      () { echo -e      "${RED}[FAIL]${NORMAL} " "${@} " ; exit 1 ; }
success   () { echo -e  "\r${GREEN}[ OK ]${NORMAL}"          ;          }


# -- BACKUP UTILITIES ---------------------------------------------------------

backup () {
    __ye_olde_IFS="${IFS}" ; IFS=','

    for config in "${1}" ; do
	case "${config}" in
	    neovim) backup_neovim ;;
	     emacs) backup_emacs  ;;
	      tmux) backup_tmux   ;;
	       all) backup_neovim
		    backup_emacs
		    backup_tmux
		    ;;
	         *) fail "Unknown configuration type '${config}'" ;;
	    esac
    done

    IFS="${__ye_olde_IFS}"
}


backup_neovim () {
    info 'Backing up configuration for Neovim'

    if [ ! -d "${home}/.config/nvim" ] ; then
	warn 'No configuration found for Neovim'
	return 1
    fi

    mkdir -p "${home}/.config/backup/"
    mv "${home}/.config/nvim/" "${home}/.config/backup/"

    success
}


backup_emacs () {
    info 'Backing up configuration for Emacs'

    if [ ! -d "${home}/.config/emacs/" ] \
    && [ ! -d "${home}/.emacs.d/"      ] \
    && [ ! -e "${home}/.emacs"         ] \
    ; then
	warn 'No configuration found for Emacs'
	return 1
    fi

    mkdir -p "${home}/.config/backup"
    mv "${home}/.config/emacs/"  \
       "${home}/.emacs.d/"       \
       "${home}/.emacs"          \
       "${home}/.config/backup/" \
       2> /dev/null

    success
}


backup_tmux () {
    info 'Backing up configuration for tmux'

    if [ ! -e "${home}/.tmux.conf" ] ; then
	warn 'No configuration found for tmux'
	return 1
    fi

    mkdir -p "${home}/.config/backup/"
    mv "${home}/.tmux.conf" "${home}/.config/backup/"

    success
}


# -- RESTORATION UTILITIES ----------------------------------------------------

restore () {
    __ye_olde_IFS="${IFS}" ; IFS=','

    for config in "${1}" ; do
	case "${config}" in
	    neovim) restore_neovim ;;
	     emacs) restore_emacs  ;;
	      tmux) restore_tmux   ;;
	       all) restore_neovim
		    restore_emacs
		    restore_tmux
		    ;;
	         *) fail "Unknown configuration type '${config}'" ;;
	    esac
    done

    IFS="${__ye_olde_IFS}"
}


restore_neovim () {
    info 'Restoring configuration for Neovim'

    if [ ! -d "${home}/.config/backup/nvim/" ] ; then
	warn 'No backup found for Neovim'
	return 1
    fi

    mv "${home}/.config/backup/nvim/" "${home}/.config/"

    success
}


restore_emacs () {
    info 'Restoring configuration for Emacs'

    if [ ! -d "${home}/.config/backup/emacs/"    ] \
    && [ ! -d "${home}/.config/backup/.emacs.d/" ] \
    && [ ! -e "${home}/.config/backup/.emacs"    ] \
    ; then
	warn 'No backup found for Emacs'
	return 1
    fi

    mv "${home}/.config/backup/emacs/"   "${home}/.config/" 2> /dev/null
    mv "${home}/.config/backup/.emacs.d" "${home}/"         2> /dev/null
    mv "${home}/.config/backup/.emacs"   "${home}/"         2> /dev/null

    success
}


restore_tmux () {
    info 'Restoring configuration for tmux'

    if [ ! -e "${home}/.config/backup/.tmux.conf" ] ; then
	warn 'No backup found for tmux'
	return 1
    fi

    mv "${home}/.config/backup/.tmux.conf" "${home}/"

    success
}


# -- INSTALLATION UTILITIES ---------------------------------------------------

install () {
    __ye_olde_IFS="${IFS}" ; IFS=','

    for config in "${1}" ; do
	case "${config}" in
	    neovim) install_neovim ;;
	     emacs) install_emacs  ;;
	      tmux) install_tmux   ;;
	       all) install_neovim
		    install_emacs
		    install_tmux
		    ;;
	         *) fail "Unknown configuration type '${config}'" ;;
	    esac
    done

    IFS="${__ye_olde_IFS}"
}


install_neovim () {
    backup_neovim

    info 'Installing Neovim configuration'
    ln -s "`pwd`/neovim/" "${home}/.config/nvim" \
	|| fail 'Unable to install tmux'
    success
}


install_emacs () {
    backup_emacs

    info 'Installing Emacs configuration'
    ln -s "`pwd`/emacs" "${home}/.config/emacs" \
	|| fail 'Unable to install tmux'
    success
}


install_tmux () {
    backup_tmux

    info 'Installing tmux configuration'
    ln -s "`pwd`/tmux.conf" "${home}/.tmux.conf" \
	|| fail 'Unable to install tmux'
    success
}


# -- HELP MESSAGE -------------------------------------------------------------

usage () {
    cat <<EOF

  Usage: $0 [command] [program]

  Commands:

    install [program]   Install the program configuration
    restore [program]   Restore the program's previously backed up configuration
    backup  [program]	Backup the program's configuration
    help    		Show this help screen

  Supported programs:

    - neovim
    - emacs
    - tmux

EOF
}

# -- ENTRY POINT --------------------------------------------------------------

main () {
    case "$#" in
	1) ;;
	2) ;;
	*) fail 'Wrong number of parameters'
    esac

    case "${1}" in
               install) install "${2}" ;;
               restore) restore "${2}" ;;
                backup) backup  "${2}" ;;
        -h|--help|help) usage          ;; 
                     *) fail "Unknown action '${1}'"
    esac
}

if [ x"$0" = x"./dotfiles" ] ; then main "${@}" ; fi

# vim: ft=sh
#
# Local Variables:
# mode:     sh
# sh-shell: sh
# End:
